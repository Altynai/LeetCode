class Solution:
    
    def bfs(self, start):
        q = collections.deque([start])
        vis = [False] * self.n
        vis[start] = True

        while q:
            i = q.popleft()
            for j, v in enumerate(self.graph[i]):
                if v == 0 or vis[j] or j in self.initial:
                    continue
                q.append(j)
                self.effected[j].append(start)
                vis[j] = True

    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        initial.sort()
        self.graph = graph
        self.n = len(graph)
        self.initial = set(initial)
        self.effected = collections.defaultdict(list)
        
        for start in initial:
            self.bfs(start)
        
        mx = ans = -1
        for start in initial:
            cut = sum(1 for i in range(self.n) if self.effected.get(i) == [start])
            if cut > mx:
                mx, ans = cut, start

        return ans

