class Solution:
    
    def find(self, x):
        root = x
        while self.parent[root] != root:
            root = self.parent[root]
        y = x
        while y != root:
            y, self.parent[y] = self.parent[y], root
        return root
        
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        self.n = len(graph)
        self.parent = list(range(self.n))
        initial.sort()

        for i in range(self.n):
            for j in range(i + 1, self.n): 
                if graph[i][j] == 1:
                    ri = self.find(i)
                    rj = self.find(j)
                    if ri != rj:
                        self.parent[rj] = ri

        cnt = collections.defaultdict(int)
        for i in range(self.n):
            cnt[self.find(i)] += 1
        
        malware = collections.defaultdict(list)
        for x in initial:
            malware[self.find(x)].append(x)

        mx = ans = -1
        for x in initial:
            root = self.find(x)
            cut = cnt[root] if len(malware[root]) == 1 else 0
            if cut > mx:
                mx, ans = cut, x
        
        return ans

